import os
import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from bot.google_calendar_manager import GoogleCalendarManager
from bot.user_manager import UserManager
import pytz
from timezonefinder import TimezoneFinder
from geopy.geocoders import Nominatim
import re
from dateparser.search import search_dates
from telegram.ext import CommandHandler
from bot.time_parser import parse_time_from_text


# ---------------- –õ–û–ì–ò ----------------
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---------------- –§–£–ù–ö–¶–ò–ò ----------------
def parse_timezone(input_str: str):
    input_str = input_str.strip()
    # UTC —Å–º–µ—â–µ–Ω–∏–µ
    match = re.match(r'([+-]?\d{1,2})$', input_str)
    if match:
        offset_hours = int(match.group(1))
        return f"Etc/GMT{-offset_hours:+d}"
    # –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞
    try:
        geolocator = Nominatim(user_agent="timezone_bot", timeout=10)
        location = geolocator.geocode(input_str)
        if location:
            tf = TimezoneFinder()
            tz_name = tf.timezone_at(lng=location.longitude, lat=location.latitude)
            if tz_name:
                return tz_name
    except Exception:
        pass
    # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    for tz in pytz.all_timezones:
        if input_str.lower() in tz.lower():
            return tz
    return None


def parse_event_datetime(text: str, user_timezone: str):
    user_tz = pytz.timezone(user_timezone)
    text_lower = text.lower()
    now = datetime.now(pytz.utc).astimezone(user_tz)

    #start_datetime = None
    start_time_range = None
    end_time_range = None

    # --- –ø–æ–∏—Å–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ "—Å 10 –¥–æ 15" ---
    time_range = re.search(
        r'(?:—Å|–æ—Ç)\s*(\d{1,2}(?:[:.\s]\d{2})?)\s*(?:–¥–æ|-)\s*(\d{1,2}(?:[:.\s]\d{2})?)',
        text_lower
    )
    if time_range:
        start_time_range = time_range.group(1)
        end_time_range = time_range.group(2)
        text_lower = text_lower.replace(time_range.group(0), '')

    # --- –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ "—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" ---
    # "—á–µ—Ä–µ–∑ N —á–∞—Å/–º–∏–Ω—É—Ç"
    match = re.search(r'—á–µ—Ä–µ–∑\s+((\d+)\s*(—á–∞—Åa|—á–∞—Å–æ–≤|—á–∞—Å|–º–∏–Ω—É—Ç—ã|–º–∏–Ω—É—Ç)|–ø–æ–ª—á–∞—Å–∞)', text_lower)
    if match:
        fragment = match.group(0)
        if '–ø–æ–ª—á–∞—Å–∞' in fragment:
            delta = timedelta(minutes=30)
        elif '—á–∞—Å' in fragment and not re.search(r'\d+', fragment):
            delta = timedelta(hours=1)
        else:
            amount = int(match.group(2))
            unit = match.group(3)
            if unit and '–º–∏–Ω' in unit:
                delta = timedelta(minutes=amount)
            else:
                delta = timedelta(hours=amount)

        start_datetime = now + delta
        end_datetime = start_datetime + timedelta(hours=1)

        # –£–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥
        event_title = re.sub(r'\s*' + re.escape(fragment) + r'\s*', ' ', text_lower, flags=re.IGNORECASE).strip()
        if not event_title:
            event_title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

        return event_title, start_datetime, end_datetime

    elif "—Å–µ–≥–æ–¥–Ω—è" in text_lower:
        start_datetime = now.replace(second=0, microsecond=0)
    elif "–∑–∞–≤—Ç—Ä–∞" in text_lower:
        start_datetime = (now + timedelta(days=1)).replace(hour=9, minute=0, second=0, microsecond=0)
        text_lower = text_lower.replace("–∑–∞–≤—Ç—Ä–∞", "")
    elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in text_lower:
        start_datetime = (now + timedelta(days=2)).replace(hour=9, minute=0, second=0, microsecond=0)
        text_lower = text_lower.replace("–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", "")
    else:
        # --- —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–µ–≥—É–ª—è—Ä–∫—É DD.MM ---
        date_match = re.search(r'\b(\d{1,2})[.](\d{1,2})\b', text_lower)
        if date_match:
            day = int(date_match.group(1))
            month = int(date_match.group(2))
            year = now.year
            start_datetime = user_tz.localize(datetime(year, month, day))
            text_lower = text_lower.replace(date_match.group(0), '')
        else:
            # --- –æ–±—ã—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ search_dates ---
            dates = search_dates(
                text_lower,
                languages=['ru'],
                settings={'PREFER_DATES_FROM': 'future', 'DATE_ORDER': 'DMY'}
            )
            if dates:
                start_datetime = dates[0][1]
                # –µ—Å–ª–∏ –≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π
                if start_datetime.year == 1900:
                    start_datetime = start_datetime.replace(year=now.year)
                text_lower = text_lower.replace(dates[0][0], '')
            else:
                start_datetime = None


    parsed_time = parse_time_from_text(text_lower)
    if parsed_time:
        hour = parsed_time.hour
        minute = parsed_time.minute
        fragment = parsed_time.fragment

        if start_datetime is None:
            start_datetime = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        else:
            start_datetime = start_datetime.replace(hour=hour, minute=minute)

        # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        text_lower = text_lower.replace(fragment, '').strip()

        # —É–¥–∞–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
        # –∏—â–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: "–≤ 7 –≤–µ—á–µ—Ä–∞", "7 –≤–µ—á–µ—Ä–∞", "7:00", "7.00", "7 00", "7 —á–∞—Å–æ–≤"
        time_patterns = [
            r'\b–≤\s*\d{1,2}\s*(?:—É—Ç—Ä–∞|–≤–µ—á–µ—Ä–∞)?\b',
            r'\b\d{1,2}\s*(?:—É—Ç—Ä–∞|–≤–µ—á–µ—Ä–∞)\b',
            r'\b\d{1,2}[:.]\d{2}\b',
            r'\b\d{1,2}\s\d{2}\b',
            r'\b\d{1,2}\s*—á–∞—Å(?:–æ–≤|–∞)?\b'
        ]

        for p in time_patterns:
            text_lower = re.sub(p, '', text_lower, flags=re.IGNORECASE)

        # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text_lower = re.sub(r'\s+', ' ', text_lower).strip()

    # --- –µ—Å–ª–∏ –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞, –Ω–æ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ ---
    if start_datetime and start_datetime.hour == 0 and start_datetime.minute == 0 and not start_time_range:
        start_datetime = start_datetime.replace(hour=9, minute=0)

    # --- –ø—Ä–æ–≤–µ—Ä–∫–∞, —É–¥–∞–ª–æ—Å—å –ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É ---
    if start_datetime is None:
        raise ValueError("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã, —É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")

    # --- –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–∞–π–º–∑–æ–Ω—É ---
    if start_datetime.tzinfo is None:
        start_datetime = user_tz.localize(start_datetime)
    else:
        start_datetime = start_datetime.astimezone(user_tz)

    # --- –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º ‚Üí –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥ ---
    if start_datetime < now:
        start_datetime = start_datetime.replace(year=start_datetime.year + 1)

    # --- –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ ---
    #end_datetime = None
    if start_time_range and end_time_range:
        def fmt(s):
            parts = [int(x) for x in re.split(r'[:.\s]', s) if x.strip()]
            return parts[0], parts[1] if len(parts) > 1 else 0

        h1, m1 = fmt(start_time_range)
        h2, m2 = fmt(end_time_range)
        start_datetime = start_datetime.replace(hour=h1, minute=m1)
        end_datetime = start_datetime.replace(hour=h2, minute=m2)

        if start_datetime.tzinfo is None:
            start_datetime = user_tz.localize(start_datetime)
        if end_datetime.tzinfo is None:
            end_datetime = user_tz.localize(end_datetime)
    else:
        # –µ—Å–ª–∏ –∫–æ–Ω–µ—Ü –Ω–µ —É–∫–∞–∑–∞–Ω ‚Üí +1 —á–∞—Å
        end_datetime = start_datetime + timedelta(hours=1)
        if end_datetime.tzinfo is None:
            end_datetime = user_tz.localize(end_datetime)

    # --- –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è: –æ—Å—Ç–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞ ---
    event_title = text_lower.strip() or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

    return event_title, start_datetime, end_datetime


# ---------------- –ö–õ–ê–°–° –ë–û–¢–ê ----------------
class TelegramCalendarBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

        self.calendar_manager = GoogleCalendarManager()
        self.user_manager = UserManager()

    @staticmethod
    async def handle_email_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['waiting_for'] = 'email'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")

    @staticmethod
    async def handle_timezone_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['waiting_for'] = 'timezone'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä Moscow –∏–ª–∏ +3):")

    @staticmethod
    async def handle_alert_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['waiting_for'] = 'reminder'
        await update.message.reply_text("–ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = str(update.effective_user.id)
        user_data = self.user_manager.get_user(user_id)

        if not user_data:
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ü§ñ\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email:"
            )
            context.user_data['waiting_for'] = 'email'
        else:
            await update.message.reply_text(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! ‚ú®\n\n"
                f"üìß Email: {user_data['email']}\n"
                f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user_data['timezone']}\n"
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –∑–∞ {user_data['reminder_minutes']} –º–∏–Ω\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è!"
            )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = str(query.from_user.id)

        if query.data == 'change_email':
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
            context.user_data['waiting_for'] = 'email'

        elif query.data == 'change_timezone':
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä Moscow –∏–ª–∏ +3):")
            context.user_data['waiting_for'] = 'timezone'

        elif query.data == 'change_reminder':
            await query.edit_message_text("–ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?")
            context.user_data['waiting_for'] = 'reminder'

        elif query.data == 'confirm_event':
            pending = context.user_data.get('pending_event')
            if not pending:
                await query.edit_message_text("‚ùå –ù–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return
            user_data = self.user_manager.get_user(user_id)

            if not user_data.get('calendar_id'):
                calendar_id = self.calendar_manager.create_user_calendar(user_data['email'],user_data['timezone'])
                self.user_manager.ensure_calendar_id(user_id, calendar_id)
                user_data['calendar_id'] = calendar_id

            if pending['end'] is None:
                pending['end'] = pending['start'] + timedelta(hours=1)

            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–ª —Å–æ–±—ã—Ç–∏–µ: {pending}")

            event_link = await self.calendar_manager.create_event(
                pending['title'],
                pending['start'],
                pending['end'],
                user_data['timezone'],
                calendar_id = user_data['calendar_id']  # ‚Üê –≤–∞–∂–Ω–æ
            )

            if event_link:
                reminder_datetime = pending['start'] - timedelta(minutes=user_data['reminder_minutes'])
                await self.schedule_reminder(
                    chat_id=query.message.chat.id,
                    event_title=pending['title'],
                    event_datetime=pending['start'],
                    reminder_datetime=reminder_datetime,
                    context=context
                )
                await query.edit_message_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nüìÖ {pending['title']}\nüïê {pending['start'].strftime('%d.%m.%Y %H:%M')}")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
            context.user_data.pop('pending_event', None)

        elif query.data == 'cancel_event':
            await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
            context.user_data.pop('pending_event', None)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = str(update.effective_user.id)
        text = update.message.text

        user_data = self.user_manager.get_user(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∫–∞–∫—É—é-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'waiting_for' in context.user_data:
            await self.handle_user_input(update, context, text)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        #user_data = self.user_manager.get_user(user_id)
        if not user_data:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text.startswith('/email'):
            context.user_data['waiting_for'] = 'email'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
            return
        elif text.startswith('/timezone'):
            context.user_data['waiting_for'] = 'timezone'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä Moscow –∏–ª–∏ +3):")
            return
        elif text.startswith('/alert'):
            context.user_data['waiting_for'] = 'reminder'
            await update.message.reply_text("–ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?")
            return

        # if 'waiting_for' in context.user_data:
        #     await self.handle_user_input(update, context, text)
        #     return

        try:
            title, start_dt, end_dt = parse_event_datetime(text, user_data['timezone'])
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {str(e)}")
            return

        context.user_data['pending_event'] = {
            'title': title,
            'start': start_dt,
            'end': end_dt
        }

        if end_dt:
            time_str = f"{start_dt.strftime('%H:%M')} ‚Äî {end_dt.strftime('%H:%M')}"
        else:
            time_str = start_dt.strftime('%H:%M')

        confirm_text = f"–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ?\n\nüìÖ {title}\nüóì {start_dt.strftime('%d.%m.%Y')}\n‚è∞ {time_str}"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data='confirm_event')],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='cancel_event')]
        ]
        await update.message.reply_text(confirm_text, reply_markup=InlineKeyboardMarkup(keyboard))

    async def handle_user_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        user_id = str(update.effective_user.id)
        waiting_for = context.user_data.get('waiting_for')

        if waiting_for == 'email':
            if '@' in text and '.' in text:
                user_data = self.user_manager.get_user(user_id) or {
                    'timezone': 'Europe/Moscow',
                    'reminder_minutes': 10
                }
                user_data['email'] = text.strip()
                self.user_manager.save_user(user_id, user_data)
                await update.message.reply_text(
                    f"‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text}\n\n"
                    f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n"
                    f"- —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UTC, –Ω–∞–ø—Ä–∏–º–µ—Ä +3 –∏–ª–∏ -5\n"
                    f"- –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä Moscow, Bangkok"
                )
                context.user_data['waiting_for'] = 'timezone'
            else:
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

        elif waiting_for == 'timezone':
            tz = parse_timezone(text)
            if tz:
                user_data = self.user_manager.get_user(user_id)
                user_data['timezone'] = tz
                # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ timezone
                calendar_id = self.calendar_manager.create_user_calendar(
                    user_email=user_data['email'],
                    user_timezone=tz,
                    calendar_summary=f"{update.effective_user.first_name} –ö–∞–ª–µ–Ω–¥–∞—Ä—å"
                )
                user_data['calendar_id'] = calendar_id
                self.user_manager.save_user(user_id, user_data)

                await update.message.reply_text(
                    f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {tz}\n\n"
                    f"–ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10):"
                )
                context.user_data['waiting_for'] = 'reminder'
            else:
                await update.message.reply_text(

                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n"
                    "- —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UTC, –Ω–∞–ø—Ä–∏–º–µ—Ä +3 –∏–ª–∏ -5\n"
                    "- –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä Moscow, Bangkok\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )


        elif waiting_for == 'reminder':
            try:
                minutes = int(text.strip())
                if 1 <= minutes <= 1440:  # –æ—Ç 1 –º–∏–Ω—É—Ç—ã –¥–æ 24 —á–∞—Å–æ–≤
                    user_data = self.user_manager.get_user(user_id)
                    user_data['reminder_minutes'] = minutes
                    self.user_manager.save_user(user_id, user_data)

                    await update.message.reply_text(
                        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                        f"üìß Email: {user_data['email']}\n"
                        f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user_data['timezone']}\n"
                        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –∑–∞ {minutes} –º–∏–Ω\n\n"
                        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è!"
                    )
                    del context.user_data['waiting_for']
                else:
                    await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç:")
            except ValueError:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç):")

    @staticmethod
    async def schedule_reminder(chat_id: int, event_title: str, event_datetime: datetime, reminder_datetime: datetime, context):
        now = datetime.now(reminder_datetime.tzinfo)
        if reminder_datetime <= now:
            return
        delay = (reminder_datetime - now).total_seconds()
        async def send_reminder():
            await asyncio.sleep(delay)
            await context.bot.send_message(chat_id=chat_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\nüìÖ {event_title}\nüïê {event_datetime.strftime('%d.%m.%Y %H:%M')}")
        asyncio.create_task(send_reminder())

    def run(self):
        app = Application.builder().token(self.token).build()
        app.add_handler(CommandHandler("start", self.start_command))
        app.add_handler(CommandHandler('email', self.handle_email_command))
        app.add_handler(CommandHandler('timezone', self.handle_timezone_command))
        app.add_handler(CommandHandler('alert', self.handle_alert_command))
        app.add_handler(CallbackQueryHandler(self.button_callback))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        app.run_polling(allowed_updates=Update.ALL_TYPES)

# ---------------- –ó–ê–ü–£–°–ö ----------------
if __name__ == '__main__':
    bot = TelegramCalendarBot()
    bot.run()
